$color-primary: #72A4B2;
$color-secondary: #E69140;
$color-success: #93B369;

$color-primary-border: #679eac;
$color-secondary-border: #e08931;
$color-success-border: #80a547;

$color-orange: #E69140;
$color-blue: #72A4B2;
$color-blue-intro: #72A4B2;
$color-yellow: #eae222;
$color-blue-alt: #72A4B2;
$color-red: #8F0E00;


$color-bright-bg: #f2f3ee;

$font-primary: 'IBM Plex Sans Condensed', sans-serif;
$font-secondary: 'Chakra Petch', sans-serif;
$font-mono: 'Roboto Mono', monospace;

$menu-min-width: 860px;
$mobile-small: 576px;
$mobile-large: 992px;

// wizard parameters
$step-size: 30px;

.swiper-slide {
  display: none;
}

// Genral Layout Margins

// "Desktop view"
$margin-page-wide: 0 80px; // for layout-related images/areas etc (with enough space for vertical breadcrumb)
$margin-page-narrow: 0 176px 268px; // for text, content etc


// Mixins for breakpoints
// Copypasta + modified from https://github.com/twbs/bootstrap/blob/v4-dev/scss/mixins/_breakpoints.scss
// inspiration for breakpoint values: https://gs.statcounter.com/screen-resolution-stats/all/austria/2018

$grid-breakpoints: (
        'xs': 360px,
        'sm': 576px,
        'md': 800px,
        'lg': 992px,
        'xl': 1366px
) !default;

// Name of the next breakpoint, or null for the last breakpoint.
@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {
  $n: index($breakpoint-names, $name);
  @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Minimum breakpoint width. Null for the smallest (first) breakpoint.
@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {
  $min: map-get($breakpoints, $name);
  @return if($min != 0, $min, null);
}

// Maximum breakpoint width. Null for the largest (last) breakpoint.
@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {
  $next: breakpoint-next($name, $breakpoints);
  @return if($next, breakpoint-min($next, $breakpoints) - .02, null);
}

// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.
@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {
  @return if(breakpoint-min($name, $breakpoints) == null, "", "-#{$name}");
}

// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.
// Makes the @content apply to the given breakpoint and wider.
@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  @if $min {
    @media (min-width: $min) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media of at most the maximum breakpoint width. No query for the largest breakpoint.
// Makes the @content apply to the given breakpoint and narrower.
@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {
  $max: breakpoint-max($name, $breakpoints);
  @if $max {
    @media (max-width: $max) {
      @content;
    }
  } @else {
    @content;
  }
}

// Media that spans multiple breakpoint widths.
// Makes the @content apply between the min and max breakpoints
@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($lower, $breakpoints);
  $max: breakpoint-max($upper, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($lower, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($upper, $breakpoints) {
      @content;
    }
  }
}

// Media between the breakpoint's minimum and maximum widths.
// No minimum for the smallest breakpoint, and no maximum for the largest one.
// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.
@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {
  $min: breakpoint-min($name, $breakpoints);
  $max: breakpoint-max($name, $breakpoints);

  @if $min != null and $max != null {
    @media (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $max == null {
    @include media-breakpoint-up($name, $breakpoints) {
      @content;
    }
  } @else if $min == null {
    @include media-breakpoint-down($name, $breakpoints) {
      @content;
    }
  }
}

// Default classes
.flex-center {
  display: flex;
  align-items: center;
}
.content-card, .list-item {
  background-color: white;
}
.content-card:hover, .list-item:hover {
  -webkit-box-shadow: 5px 5px 10px 0px rgba(0,0,0,0.2);
  box-shadow: 5px 5px 10px 0px rgba(0,0,0,0.2);
}

.top-header-inner img:hover {
  filter: invert(1);
}

// Workshops
.workshop-button:hover {
  opacity: 0.5;
}

// Machines
.machine-teaser {
  background-color: white;
}

// main navigation
.main-nav-item:hover {
  color: #E69140 !important;
}

.login-button button:hover {
  background-color: black !important;
}

.dropdown .child a:hover {
  color: #E69140 !important;
}

// cards
.gg-card {
  cursor: pointer;
}

.gg-card:hover {
  background-color: black;
  color: white;
  opacity: 0.8;
}

.gg-card:hover img:not(:hover) {
  filter: invert(1);
}

// layout margins
@mixin margin-page-wide() {
  margin-left: 4%;
  margin-right: 4%;
}

@mixin margin-page-middle() {
  margin-left: 8%;
  margin-right: 7%;
}

@mixin margin-page-narrow() {
  margin-left: 12%;
  margin-right: 9%;
}

// Buttons
.input-button-primary:hover {
  background-color: black !important;
  border: 1px solid black !important;
  color: white !important;
}

.input-button-primary {
  cursor: pointer;
  background-color: $color-secondary;
  color: #FFF;
  border: 1px solid $color-secondary-border;
  padding: 7px 12px 8px;
  line-height: 1;
  outline: none;
  align-self: center;
  margin-top: 20px;
}


.input-button-primary:disabled {
  cursor: default;
  background-color: grey;
  border: 1px solid darkgrey;
}

.input-button-back {
  @extend .input-button-primary;
}

.input-button-payment {
  @extend .input-button-primary;
  font-weight: bold;
}

// Headlines
h3 {
  font-size: 1.3rem;
  margin: 0;
  font-weight: bold;
}

// Toasts
.goodToast {
  background-color: $color-blue-alt !important;
}

.badToast {
  background-color: $color-red !important;
  font-weight: bold;
}

// Alerts
.alert {
  position: relative;
  padding: .75rem 1.25rem;
  margin-bottom: 1rem;
  border: 1px solid transparent;
  border-radius: .25rem;
}

.alert-primary {
  color: white;
  background-color: $color-primary;
  border-color: $color-primary-border;
}

.alert-secondary {
  color: white;
  background-color: $color-secondary;
  border-color: $color-secondary-border;
}

.alert-success {
  color: white;
  background-color: $color-success;
  border-color: $color-success-border;
}

.fade.show {
  opacity: 1;
}

.fade {
  opacity: 0;
  transition: opacity .15s linear;
}


input:invalid {
  background-color: rgba(198, 141, 141, 0.96);
  color: white;
  border: 2px solid rgba(193, 111, 111, 0.96);
  border-radius: 2px;
}
input:focus {
  outline: none !important;
  border: 2px solid rgba(30, 30, 30, 0.87);
  border-radius: 2px;
}